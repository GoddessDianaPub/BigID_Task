# Available parameters and their default values for the BigID chart.
global:
  # Default node selector for BigID services
  # example: nodeSelector: eks.amazonaws.com/capacityType: ON_DEMAND
  nodeSelector: {}
  ## @param affinity Affinity for pod assignment.
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  ## @param topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## @param tolerations Tolerations for eligible pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  ## @param podAnnotations Annotations for BigiD pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  ## Pod labels.
  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  ## Used to pass Labels for selecting BigID Services
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  ##
  commonAnnotations: {}
  # BigID Auth key
  authKey: ""
  # BigID Secret key
  secretKey: "5e3dbb46a764033935abaa5"
  ## @param global.existingSecretKeyName
  ## The name of an existing secret to be used for the secret key.
  existingSecretKeyName: ""
  # Set 'global.existingSecretKeys.enabled' to 'true' to use a pre-existing secret named 'secret-key'
  # containing: 'secretKey', 'secretSalt', 'okta-token', 'appsCredsKey', 'sendgrid-api-key'.
  existingSecretKeys:
    enabled: false
  # For KOTS only
  installationType: "helm"
  # BigID Secret Salt - Required For FIPS deployment
  secretSalt: ""
  # BigID Payload encryption key
  payloadEncKey: ""
  # When this is enabled, a secret named 'payload-enc-key' with the key 'payloadEncKey' must be created before Helm installation.
  existingPayloadEncSecret: false
  # custom app payload secret key
  customAppPayloadSecretKey: ""
  # LaunchDarkly SDK KEY
  LaunchDarklySdkKey: ""
  # LaunchDarkly API KEY
  LaunchDarklyApiKey: ""

  # Enable the use of a pre-created secret for Redis, RabbitMQ, and Elastic credentials.
  # When this is enabled, a secret named 'bigid-auth-secret' must be created before Helm installation.
  # The secret should contain the following environment variables:
  # - rabbitmq-user: <RabbitMQ username>
  # - rabbitmq-pass: <RabbitMQ password>
  # - redis-pass: <Redis password>
  # If elasticsearch is enabled, also include the following variables:
  # - BIGID_ELASTICSEARCH_USER: <Elasticsearch username>
  # - BIGID_ELASTICSEARCH_PWD: <Elasticsearch password>
  existingAuthSecret:
    enabled: false
  ## @param global.extraEnvVars Array with extra environment variables to add to BigID Deployments
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param global.extraEnvVarsCM Name of existing ConfigMap with extra env vars for BigID Deployments
  extraEnvVarsCM: ""
  ## @param global.extraEnvVarsSecret Name of existing Secret with extra env vars for BigID Deployments
  extraEnvVarsSecret: ""
  ## @param extraVolumes Array to add extra volumes
  extraVolumes: []
  ## @param extraVolumeMounts Array to add extra mounts
  extraVolumeMounts: []
  ## @param global.imageRegistry Global Docker image registry for Bitnami charts
  imageRegistry: ""

  interServicesAuthentication:
    enabled: false
    throwException: true

  keyRotation:
    enabled: false

  istio:
    enabled: false
    gateway:
      serviceName: "istio-gateway"

  ## @param global.image Global image values for BigID deployments
  image:
    repository: ""
    tag: ""
    pullPolicy: ""

  ## @param global.imageCredentials - Username/Password Docker registry credentials.
  imageCredentials:
    enabled: true
    registry: https://index.docker.io/v1/
    username: ""
    password: ""
    # Enable @global.imageCredentials.existingSecret.enabled to use pre-created registrypullsecret secret
    # When enabled a secret named 'registrypullsecret' with the key '.dockerconfigjson' needs to be created before Helm installation
    existingSecret:
      enabled: false

  ## @param global.imagePullSecrets Existing Kubernetes secret for Docker registry.
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets:
    - registrypullsecret

  ## @param global.ingress - BigID Ingress resource for BigID UI
  ingress:
    ## Options: nginx, alb, kong
    class: ""
    bigidHost: "bigid.example.com"
    rabbitmqHost: ""
    annotations: {}
    tlsSelfSignedCreate: true   # alb.ingress.kubernetes.io/target-type: instance

  ## BigiD APM Monitoring, Support: NewRelic, DataDog.
  apm:
    enabled: false
    type: datadog ## Types: "newrelic", "datadog".
    customerName: ""
    ## NewRelic Key.
    key: ""

  ## BigiD Amplitude
  amplitude:
    enabled: false
    apiKey: ""

  ## Wait for Container Tag
  bigidInitWaitForTag: release-1
  ## BigID FIPS Mode
  fips:
    enabled: false
  # Writable path on readonly filesystem
  # readOnlyFileSystemPath: "/tmp"

  ## System time zone.
  timeZone: UTC # Asia/Jerusalem

  ## Use quorum queue
  bigidMqUseQuorumQueue: false
  bigidMqQuorumQueueExpiresMs: 60000

  ## InitContainers configuration for BigID internal healthchecks
  initContainers:
    image:
      registry: ""
      repository: alpine
      tag: edge
    resources:
      requests:
        memory: 256Mi
        cpu: 50m
      limits:
        memory: 512Mi
        cpu: 250m

    ## @param global.initContainers.containerSecurityContext Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    containerSecurityContext:
      enabled: true
      runAsUser: 65532
      runAsGroup: 65532
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
          - NET_RAW
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault

  ## BigID Services values
  bigid:

    ## @param global.bigid.containerSecurityContext Security Context for BigID containers
    containerSecurityContext:
      enabled: true
      runAsUser: 65532
      runAsGroup: 65532
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
          - NET_RAW
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault

    ## @param global.bigid.podSecurityContext Security Context for BigID pods
    podSecurityContext:
      enabled: true
      runAsUser: 65532
      runAsGroup: 65532
      runAsNonRoot: true

    # param with supported MT apps. other will be hidden
    mtSupportedTpaNames: >
      [
        "Wiz Data Exchange",
        "Access Intelligence",
        "GCP Auto-Discovery App",
        "AWS Auto-Discovery App",
        "Azure Auto-Discovery App",
        "NetApp Ontap Auto-Discovery App",
        "BigID Collibra Integration App",
        "PIA",
        "DOC Classifiers Generator",
        "Classifier Helper",
        "RoPA",
        "DSAR",
        "CyberArk",
        "HashiCorp",
        "Thycotic",
        "Remediation",
        "ServiceNow IRM Integration",
        "Data Retention",
        "XSOAR Cortex integration app",
        "Privacy Portal",
        "Alation Integration App",
        "File Labeling",
        "Data Deletion",
        "BigID-Actions",
        "Actions App (Scanner Based)",
        "bigid-jira",
        "Email",
        "Azure Key Vault Integration",
        "BeyondTrust Secrets Safe Integration",
        "AWS Secrets Manager",
        "Snowflake Secure Analytics",
        "HashiCorp Vault Integration",
        "BigID Databricks Integration App",
        "Cookie Management",
        "Activity Monitoring",
        "EDC Integration App",
        "ServiceNOW Integration"
      ]

    # set to true to enable mongoDB queries comment
    mongoComment:
      enabled: false

    # Set to true to save the scanner logs in the MongoDB
    saveScannerLogsInDbEnabled: false

    # Set to true to use auth secret key for JWT tokens
    authKey:
      enabled: false

    # Set to true to enable the dynamic modify scan window
    dynamicModifyScanWindowFF:
      enabled: true

    # Set to true to enable the Data Deletion App feature
    showDataMinimizationApp: true

    # Set to true to enable legal entities feature
    legalEntitiesEnabledFF: true

    # Set to true to enable risk register feature
    riskRegisterEnabledFF: false

    # Set to false to disable the Connectivity Experience feature
    connectivityExperienceEnabled: true

    # Set to true to enable the New Tab Experience For New Connectivity feature
    newConnectionTabEnabled: true

    # Set to false to disable the DS Collaboration feature
    dsCollaborationEnabled: true

    # Set to true to enable the CM1 Objects Deletion APIs
    objectsDeletionEnabled: false

    # Set to true to enable lock when write to roles primaryKey to Redis
    useRolesRefreshLockValue: false

    # Set to false to disable the Customer EA Program feature
    customerEaProgramEnabled: true

    # Set to false to disable the Onboarding Assistant Feature
    onboardingAssistantEnabled: true

    # set to true to enable the discovery dashboard feature
    discoveryDashboardEnabled: false

    # set to true to enable the new saved queries page
    newSavedQueriesViewEnabled: false

    # Set to true to enable the ds_connections collection enrichment fields
    dsConnectionsEnrichmentEnabled: true

    # Set to true to enable handling of stuck queued scan parts
    stuckQueuedScanParts: false

    stuckQueuedScanPartsMinutesIdleTime: 10

    # Set to true to enable Privacy Portal Consolidation
    privacyPortalIntegrationEnabled: false

    # Set to true to enable Privacy Portal Data Sources
    enablePrivacyPortalDataSources: false

    # Set to true to enable the sending of actionable insights email to users
    actionableInsightsDigestEmailEnabled: false

    # Set to true to enable the send email action
    sendEmailActionEnabled: true

    # Set to true to enable the Classifier Tester feature
    classifierTester:
      enabled: true

    # Set to false to disable the use of Software as a Service (SaaS)
    useSaas:
      enabled: false

    # Set to false to disable services logs
    shouldDisableLogs: false

    # Set to false to disable Multi-Tenant Mode
    multiTenantMode:
      enabled: false
      # Specify the regular expression to match tenant domain patterns
      tenantDomainRegex: "(http[s]?://)?(.*bigid[.]cloud)"
      generateAndUseMongoCreds: false

    # Set to false to not use display names for policy feature flag
    useDisplayNameForPolicyFF: false

    # Set to false to disable the Unified Vaults feature
    enableUnifiedVaults: false

    # Set to false to disable the Landing Page Per User  feature
    enableLandingPagePerUser: false

    # Set to false to disable bigchat
    bigchatFFEnabled: false

    # Set to false to disable llm engine
    bigLLMEnabledFF: false

    # Specify the env that is sent in events to DL
    saasEnv: ""

    # Set too false to disable the use of scan page state feature flag
    useScanPageStateFF: true

    #Set to false to disable the use of scan template
    enableScanTemplateFF: true

    # Set to false in order to use the legacy scan jobs
    scanJobsInMemoryEnabled: true

    # Set to false to not disable the legacy ACL (Access Control List) feature flag
    disableLegacyAclFF: true

    # Set to false to disable sensitivity classification v2
    sensitivityClassificationV2Enabled: true

    # Set to false to disable aci dashboard v2
    aciDashboardUiV2Enabled: true

    # Set to true to enable new smb v2 aci feature
    smbV2AciEnabled: true

    # Set to true to enable aci for folders feature
    aciSupportForFoldersEnabled: false

    # Set to true to enable auto AD sync feature
    aciAutoADSyncEnabled: false

    # param with timeout value in minutes for auto AD sync feature
    aciAutoADSyncTimeoutMinutes: 180

    # Set to true to enable aci rerun flow
    aciRerunFlowEnabled: false

    # param with supported Data Sources for auto AD sync feature. Others will be processed as usual
    aciAutoADSyncSupportedDs: >
      [
        "sharepoint-online",
        "sharepoint-online-v2",
        "o365-onedrive",
        "onedrive-v2"
      ]
    # Set to true to enable aci delete dynamic labeling
    eventBasedLabelingEnabled: false

    # Set to true to enable option to create DSAR profile fields from catalogue (DSAR_PROFILE_FIELDS_CATALOG_IMPORT_ENABLED_FF)
    dsarProfileFieldsCatalogueImportEnabledFF: false

    # Set to true to enable global privacy profile
    dataMappingProfilesEnabledFF: false

    # Set to true to enable catalog elastic search usage
    catalogElasticEnabled: false

    # Set to true to enable catalog container entity
    enableContainerEntity: false

    # Set to true to enable archiving dspm cases
    enableArchivingDspmCases: true

    # Set to true to enable signing service and key rotation
    signingServiceEnabled: true

    # Set to true to enable TPA request validation
    signingTpaRequestsEnabled: false

    # Set to true to use objects diff scan
    objectsDifferentialScanEnabled: true

    # Set to true to use per object summary
    perObjectSummaryEnabled: false

    # Set the number to change the number of objects under part
    numberOfObjectsPerPart: 400

    # Set to true to use full scan with retry object level
    fullScanSupportRetryObjectsLevel: false

    # Set to true to enable classification in file names
    classifyFileNamesEnabled: false

    # set max amount of ds per scan - default value is 1000
    maxAmountOfDsPerScanFF: 1000

    # set to true to enable using classic rabbitMQ queues for correlation
    useClassicQueueForCorrelation: false

    # Specify the company name
    companyName: ""

    # Set to true to use llm classification
    llmClassifierEnabled: false

    # Log configuration settings
    logConfiguration:
      # Set to false to disable JSON logs
      jsonLogs:
        enabled: false
      # Specify the number of log files to keep
      amountOfLogsFile: 5

    # Set to true to enable the Scalable Health Check feature
    scalableHealthCheck:
      enabled: true

    #Set to true to create JWT for bigid application
    generateToken:
      enabled: false

    # Data Lake Client settings
    dataLakeClient:
      # Set to false to disable the Data Lake Client feature
      enabled: false
      # Specify the Data Lake stream name
      dlStreamName: ""
      dlRegionName: ""

    # Set to true to enable the Risk Assessment feature
    riskAssessment:
      enabled: true

    # Set to true to enable the Feedback Loop feature
    feedbackLoop:
      enabled: true

    # Set to true to enable the Compliance Frameworks feature
    complianceFrameworksEnabled: false

    # Set to true to enable DSPM dashboards
    DspmDashboardsEnabled: false

    # Set to true to enable DSMP Activity Monitoring
    dspmActivityMonitoringEnabled: false

    # Set to true to enable DS_MULTI_DIM dashboards
    DsMultiDimDashboardsEnabled: false

    # Set to true to enable the Classifier Tuning Light Preview feature
    classifierTuningLightPreviewEnabled: true

    # DataDog Metrics settings
    ddMetrics:
      # Specify the DataDog API key
      ddApiKey: ""
      # Specify the DataDog URI
      ddURI: "https://api.datadoghq.com/api/v1/series"
      # Set to false to disable DataDog integration
      dataDogEnabled: false

    # Backpressure settings
    backpressure:
      # Set to false to disable the Backpressure feature
      enabled: false
      # Set to false to not enable dry run for Backpressure
      dryRunEnabled: false
      # Specify the queues configuration for Backpressure
      queuesConfiguration: '[{"queue": "pii.findings.durable.queue","threshold": 10000}, {"queue": "correlator.correlation.queue","threshold": 10000}, {"queue": "correlator.correlation.structured","threshold": 10000},{"queue": "correlator.correlation.rapid","threshold": 10000}, {"queue": "correlator.classification.queue","threshold": 150000}, {"queue": "classification.findings.durable.queue","threshold": 10000}, {"queue": "catalog.object.scanned.queue","threshold": 150000}, {"queue": "catalog.object.scanned.bulk.queue","threshold": 2250}, {"queue": "catalog.source.piisummary.queue","threshold": 150000}, {"queue": "enrichment.findings.queue","threshold": 10000}, {"queue": "catalog.object.scan.completed.queue","threshold": 300000}]'
      # Specify the cron expression for reporting queues metrics
      reportQueuesMetricsCronExp: "*/30 * * * * *"
      # Specify the window in minutes for excessive load detection
      excessiveLoadDetectionWindowInMin: 5
      # Specify the cron expression for system overload detection
      systemOverloadDetectionCronExp: "*/40 * * * * *"
      # Specify the maximum allowed concurrent scanner jobs
      allowedConcurrentScannerJobs: 0
      # Specify the recovery threshold percentage
      recoveryThresholdPercentage: 40
      # Specify the time-to-live in seconds for status
      statusTtlSec: 120

    #AI_security
    aiSecurity:
      enabled: false

    # Set to true to enable the DSPM feature
    actionableInsights:
      enabled: true
      DSPMServiceNow:
        enabled: true
      DSPMPolicyActions:
        enabled: true

    ## BigID Services values
    scanner:
      replicaCount: 1
      ## @param global.bigid.scanner.remote.enabled - Enable BigID Remote scanner.
      remote:
        enabled: false
      nodeSelector: {}
      hostNetwork: false
      hadoop:
        create: false
        fullnameOverride: ""
        groupName: "SCANNER_WITH_HADOOP_GROUP"
      fullnameOverride: ""
      fipsMode:
        enabled: false
      resources:
        requests:
          memory: 14Gi
          cpu: 7
        limits:
          memory: 14Gi
          cpu: 7
      refreshToken: ""
      trustStoreKey:
        enabled: false
        # JKS / PKCS File Needs to be a Base64 Encoded String, E.G cat <yourfile.jks> | base64
        truststoreFile: ""
      groupName: "default"
      JavaOpts: ""
      nfsV4:
        enabled: false
      ### Enable Service Account to Scanner pod
      serviceAccount:
        # Specifies whether a service account should be created
        create: false
        # Annotations to add to the service account
        annotations: {}
      ## @param extraVolumes Array to add extra volumes (evaluated as a template)
      ##
      extraVolumes: []
      ## @param extraVolumeMounts Array to add extra mounts (normally used with extraVolumes, evaluated as a template)
      ##
      extraVolumeMounts: []
      ## @param sidecars Attach additional containers to the pods (scheduler, worker and server nodes)
      ## e.g.
      ## sidecars:
      ##   - name: your-image-name
      ##     image: your-image
      ##     imagePullPolicy: Always
      ##     ports:
      ##       - name: portname
      ##         containerPort: 1234
      sidecars: []
      emptyDir:

    scaler:
      # Whether to create the scaler (true/false)
      create: false

      # Enable/disable the scannerController (Scanner deployment management)
      scannerController:
        enabled: false

      # Override the full name of the scaler (leave empty for default)
      fullnameOverride: ""

      # Define resource requests and limits for the scaler pods
      resources:
        requests:
          memory: 256Mi
          cpu: 200m
        limits:
          memory: 2Gi
          cpu: 1000m

      serviceAccount:
        annotations: {}

      # CPU scale-down threshold percentage
      cpuScaleDownThreshold: "20"

      # Queue scan parts threshold percentage
      queueScanPartsThreshold: "30"

      # Minimum number of pods the scaler can scale down to
      minPods: "1"

      # Maximum number of pods the scaler can scale up to
      maxPods: "3"

      # CPU usage threshold percentage for scaling actions
      cpuThreshold: "80"

    correlator:
      ## Ignite cluster configuration.
      ignite:
        enabled: false
        clusterName: ignite
        namespace: gridgain
        # Options: PARTITIONED / REPLICATED
        cacheMode: PARTITIONED
        backups: 3
      resources:
        requests:
          memory: 28Gi
          cpu: 7
        limits:
          memory: 28Gi
          cpu: 8
      maxConnectionsPerRoute: 5
      maxTotalConnections: 10
      terminationGracePeriodSeconds: 300
      updateStrategy:
        type: RollingUpdate
      autoscaling:
        enabled: false
        minReplicas: 1
        kedaMinReplicas: 0
        maxReplicas: 3

    ner:
      create: false
      resources:
        requests:
          memory: "3Gi"
          cpu: "2"
        limits:
          memory: "7Gi"
          cpu: "4"
      isNerProxy: false
      httpProxy: ""
      httpsProxy: ""
      persistence:
        enabled: false
        emptyDir:
          sizeLimit:
            nerDir: ""

    labeler:
      create: false
      enableLabelerCustomCert: false
      httpProxy: ""
      httpsProxy: ""
      # when enabled, add the certificate named labeler-custom-cert.cert to modules/compose/helm.v3/charts/scanner/certs
      nodeSelector: {}

    web:
      port: 3000
      resources:
        requests:
          memory: 500Mi
          cpu: 250m
        limits:
          memory: 2Gi
          cpu: 1
      auth0ClientTimeOut: 90000
      auth0Domain: ""
      auth0CustomDomain: ""
      auth0CloudClientSecret: ""
      auth0CloudClientId: ""
      cloudPortalApiUrl: "https://portal-api-staging.bigid.cloud"
      workspacesEnabled: false
      workspacesLastVisitedPageEnabled: true
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        pollingInterval: 30
        averageValue: 2500
        targetCPUUtilizationPercentage: 85
      emptyDir:
        sizeLimit:
          auditLog: ""
    ui:
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "2Gi"
          cpu: "2500m"
      service:
        # Can be set to ClusterIP, NodePort, LoadBalancer
        type: ClusterIP
        # Service port will be 80 or 443 (On 443, a self-signed certificate will be used, or override ui.tls)
        # NGINX containerPort will be on unprivileged ports 8080/8443
        port: 80 ## 80,443
        nodePort: 30846
        ## Additional labels.
        additionalLabels: {}
        ## Common labels.
        commonAnnotations: {}
      ## Override BigID UI Certificates (base64-encoded file)
      tls:
        certFile: ""
        keyFile: ""
        dhParam: ""
      ## @param largeClientHeaderBuffers  Set large_client_header_buffers in NGINX config
      largeClientHeaderBuffers: ""
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 85
      emptyDir:
        sizeLimit:
          cacheVolume: ""
          runVolume: ""
          nginxVolume: ""
          certVolume: ""

    # To enable Clustering, you must enable NER as well.
    clustering:
      create: false
      hotspots:
        create: false

    confluent:
      create: false

    bigidme:
      create: false

    aci:
      create: false

    cryptmgr:
      create: false

    actionCenter:
      create: true

    reportingEtl:
      create: false

    collaboration:
      create: false

    tenantService:
      create: false
      port: 3558
      mongodb:
        adminTenantId: "00000000"
        bigidDbName: "bigid-server"

    reports:
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"

    orchestrator:
      correlationSetsInfrastructureEnabled: false
      terminationGracePeriodSeconds: 120
      appTerminationGracePeriodSeconds: "115"
      scalablePiiFindingsDeletion:
        enabled: false
      newCredentialsFlow:
        enabled: false
      classifierSuperscanPrefiltering:
        enabled: true
      cacheFindingsFilterTTLSec: 604800
      logLevel: trace
      emptyDir:
        sizeLimit:
          logs: ""
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"

    orchestrator2:
      port: 3003
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"
      consumer:
        create: false
        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 5
          averageValue: 250
          completedQueueThreshold: 250
          targetCPUUtilizationPercentage: 75
      scannerLogsTtlSeconds: 259200
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        averageValue: 250
        completedQueueThreshold: 250
        targetCPUUtilizationPercentage: 75
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10
      tpaDeployment:
        monitoringJobMaxRetries: 10
        monitoringJobInitialDelayInMilliseconds: 120000
        monitoringJobDelayInMilliseconds: 30000
        supportedApps: '["ropa", "pia", "remediation", "collibra", "classifier-helper", "doc-classifiers-generator", "alation", "wiz-data-exchange", "retention", "actions", "actions-java", "jira", "hashicorp-vault", "azure-key-vault", "edc", "servicenow"]'
      scalableDeletion:
        hpaQueueAverageValue: 400
        scheduleInterval: 10000
        attemptFailureRestartInterval: 600000
        numberOfAttemptFailureBeforeFailure: 10
        jobTTL: 60000
        chunkSize: 1000
        updatedAtFieldUpdatesIntervalMS: 5000
        deletionJobsRetentionInDays: 4
        hardStopWorkers: false
      deleteClassificationFindings:
        enabled: false
        deletionPeriodDays: 60
        scheduleInterval: 1440
      classifierSuperscanPrefiltering:
        enabled: true

    # BigID Config service values.
    configService:
      replicaCount: 1
      port: 3004
      multiTenantConfigEnabled: false
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "2"

    # BigID Outpost manager service values.
    outpostManager:
      create: false

    # BigID Process manager service values.
    processManager:
      create: false

    # BigID Snippet persister service values.
    snippetPersister:
      create: false

    metadataSearch:
      create: false
      elasticsearchSsl:
        create: false

    catalogProcessor:
      create: false

    lineage:
      create: false

    dataCatalog:
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "6Gi"
          cpu: "1200m"
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        averageValue: 250
        targetCPUUtilizationPercentage: 75
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10

    dataCatalogConsumer:
      create: true
      prefetchCount: 40
      terminationGracePeriodSeconds: 120
      appTerminationGracePeriodSeconds: "115"
      graceComplete:
        enabled: false
        countThreshold: 50
        pctThreshold: 0.99
      resources:
        requests:
          memory: "1Gi"
          cpu: "750m"
        limits:
          memory: "4Gi"
          cpu: "1200m"
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        averageValue: 250
        scaleDownPolicy:
          stabilizationWindowSeconds: 900
          periodSeconds: 300
          value: 10

    ## BigID Activity Monitoring
    acm:
      create: false
      acm:
        replicaCount: 1
        nodeOptions: ""
        nodeMaxOldSpaceSizePercent: 85
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi
      collector:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi
      discoverer:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi
      elasticWriter:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi
      archiveWriter:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi
      archiveReader:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi
      aggregator:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 2Gi

    ## Labels for BigID kubernetes services.
    svcLabels:
      bigid-core: "true"

  ## Affinity Settings
  # This value defines the affinity for scanner and correlator pods.
  # It defaults (antiAffinity) to allow only a single pod on each node,
  corrAffinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - bigid-corr-new
        topologyKey: kubernetes.io/hostname
  scannerAffinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - bigid-scanner
        topologyKey: kubernetes.io/hostname

  awsRegion: "us-east-1"

  kafka:
    managedSpecs:
      mskBrokers: b-1.devcluster1.3zurs6.c13.kafka.us-east-1.amazonaws.com:9098,b-2.devcluster1.3zurs6.c13.kafka.us-east-1.amazonaws.com:9098
      region: us-east-1
    retention: "86400000"
    topics:
      # Enable topics deletion
      delete: false
      acm:
        aggregatedEvents:
          name: acm-aggregated-event
          partitions: 10
          replicas: 1
        aggregatedRetentionEvents:
          name: acm-aggregated-retention-event
          partitions: 10
          replicas: 1
        logEvents:
          name: acm-event
          partitions: 3
          replicas: 1

## Bitnami RabbitMQ
rabbitmq:
  ## Enable Internal Bitnami RabbitMQ
  enabled: true
  fullnameOverride: bigid-mq
  replicaCount: 1
  auth:
    username: bigid
    password: password
    ## @param rabbitmq.auth.existingPasswordSecret Existing secret with RabbitMQ credentials (existing secret must contain a value for `rabbitmq-password` key or override with setting auth.existingSecretPasswordKey)
    ## e.g:
    ## existingPasswordSecret: name-of-existing-secret
    existingPasswordSecret: ""
    ## @param rabbitmq.auth.tls.existingSecret Existing secret with certificate content to RabbitMQ credentials
    ## @param rabbitmq.auth.tls.existingSecretFullChain Whether or not the existing secret contains the full chain in the certificate (`tls.crt`). Will be used in place of `ca.cert` if `true`.
    ## @param rabbitmq.auth.tls.overrideCaCertificate Existing secret with certificate content be mounted instead of the `ca.crt` coming from caCertificate or existingSecret/existingSecretFullChain.
    tls:
      existingSecret: ""
      existingSecretFullChain: false
      overrideCaCertificate: ""
    ## @param auth.existingErlangSecret Existing secret with RabbitMQ Erlang cookie (must contain a value for `rabbitmq-erlang-cookie` key or override with auth.existingSecretErlangKey)
    existingErlangSecret: ""
  loadDefinition:
    enabled: true
    ## Loading a RabbitMQ definitions file to configure RabbitMQ
    ## @param loadDefinition.existingSecret Existing secret with the load definitions file
    ## The default value is 'load-definition'. If you change this value, you must manage the entire JSON configuration,
    ## including all policies and credentials, within your own secret. The JSON policy can be reviewed in the 'load-definition'
    ## secret or in the RabbitMQ sub-chart values.
    existingSecret: "load-definition"
  ## @param configurationExistingSecret Existing secret with the configuration to use as rabbitmq.conf.
  ## Must contain the key "rabbitmq.conf"
  ## With providing an existingSecret, extraConfiguration and extraConfigurationExistingSecret do not take any effect
  ##
  configurationExistingSecret: ""
  persistence:
    enabled: false
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 8Gi
  image:
    repository: bitnami/rabbitmq
    tag: 3.13.7
  podLabels: {}
  exporter:
    ## Enable to install RabbitMQ Exporter for Prometheus
    enabled: false
    image:
      repository: "rabbitmq-exporter"
      tag: "1.0.0"
    additionalLabels:
      app: bigid-mq-exporter
    podLabels:
      app: bigid-mq-exporter
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9419"
  statefulsetLabels:
    app: bigid-mq
  ## RabbitMQ containers' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    enabled: true
    seLinuxOptions: null
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
        - NET_RAW
    seccompProfile:
      type: "RuntimeDefault"

  ## RabbitMQ pods ServiceAccount
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001

  serviceAccount:
    create: true
    name: ""

  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      namespace: monitoring
  resources:
    limits:
      cpu: 3000m
      memory: 7Gi
    requests:
      cpu: 500m
      memory: 500Mi
  ingress:
    enabled: false
    path: /
    pathType: ImplementationSpecific
    hostname:
    annotations: {}
    ingressClassName: ""
  ## Memory threshold under which RabbitMQ will stop reading from client network sockets
  ## ref: https://www.rabbitmq.com/alarms.html
  ## ref: https://www.rabbitmq.com/memory.html#threshold
  memoryHighWatermark:
    enabled: true ## Enable configuring Memory high watermark
    type: "relative"
    ## Memory high watermark value (default: 0.4 for 40% of available RAM)
    ## Note: Use an absolute value (e.g., 256MB) or relative to resource.limits.memory
    value: 0.85

  ## External RabbitMQ connection string details
  externalRabbitmq:
    enabled: false
    hostname: ""
    port: ""
    auth:
      username: ""
      password: ""
  ## Network Policies
  networkPolicy:
    enabled: true
    extraIngress:
      - ports:
          - port: 15671
            protocol: TCP
        from:
          - podSelector: {}

  service:
    annotations:
      service.kubernetes.io/topology-mode: "auto"

  service:
    annotations:
      service.kubernetes.io/topology-mode: "auto"

# Bitnami MongoDB
mongodb:
  # @mongodb.externalMongo - All configuration related to external mongodb instance
  externalMongo:
    enabled: false
    port: 27017
    ## MongoDB Auth
    auth:
      username: bigid
      password: password
    # MongoDB custom URI prefix
    uriPrefix: "mongodb"
    # MongoDB custom URI
    uri: "bigid-server?authSource=admin&replicaSet=bigid-replica-set"
    # MongoDB IP Address, if you use SSL externalIP value should be FQDN
    externalIP: ""

    # Enable @mongodb.externalMongo.existingAuthSecret to use pre-created MongoDB authentication secret
    # When enabled a secret named 'mongodb-base-configuration' needs to be created before Helm installation
    # with the following environment variables:
    # - MONGO_EXTERNAL_FULL_URL
    # - BIGID_MONGO_HOST_EXT
    # - BIGID_MONGO_USER
    # - BIGID_MONGO_PWD
    existingAuthSecret:
      enabled: false

    ## Connect to MongoDB via Kerberos
    # kerberos: true
    # mongoKRBconf: "-Djava.security.krb5.conf=/etc/kerberos/krb5.conf"
    # mongoKRBrealm: "-Djava.security.krb5.realm=BIGID.COM"
    # mongoKRBkdc: "-Djava.security.krb5.kdc=kerberos.bigid.com"
    # mongoKRBauth: "-Djavax.security.auth.useSubjectCredsOnly=false"
    # mongoKRBlogin: "-Djava.security.auth.login.config=/etc/gss/jaas.conf"

    ## Enable to use existing secrets for krb5.conf and keytab files via @param global.extraVolumes and global.extraVolumeMounts
    existingKrbSecret: false

    ## Enable @mongodb.externalMongo.existingSslSecrets to use pre-created MongoDB SSL secrets
    ## When enabled, the following secrets should be created before installation:
    ## - bigid-mongodb-ca: Contains client.cert, client.key, and ca.cert
    ## - mongo-ssl-truststore-secrets: Contains truststore.jks and client.jks
    existingSslSecrets:
      enabled: false

    ## Connect to MongoDB via SSL, read BigID documentation https://www.docs.bigid.com/docs/mongodb-with-ssl
    # mongoSSL: true
    # mongoSSLDisableHostnameVerification: true
    # mongoSSLCAPath: "/etc/ssl/bigid/ca.cert"
    # javaSSLTrustStore: "-Djavax.net.ssl.trustStore=/etc/ssl/bigid/truststore.jks"
    # javaSSLTrustStorePassword: "-Djavax.net.ssl.trustStorePassword=password1"
    # mongoX509: false

    ## Connecting to MongoDB SSL Instance with Client Certificate Validation
    # mongoSSLClientCertPath: "/etc/ssl/bigid/client.cert"
    # mongoSSLClientKeyPath: "/etc/ssl/bigid/client.key"
    # javaSSLKeyStore: "-Djavax.net.ssl.keyStore=/etc/ssl/bigid/client.jks"
    # javaSSLKeyStorePassword: "-Djavax.net.ssl.keyStorePassword=password1"

    # To provide a full connection string, uncomment the line below and fill the full connection string in the standard format
    # fullUrl: "mongodb://<username>:<password>@<host>:<port>/<database>?<options>"

  ## Enable Internal Bitnami MongoDB
  enabled: false
  architecture: replicaset
  fullnameOverride: bigid-mongodb
  commonLabels:
    app: bigid-mongodb
  replicaCount: 1
  nodeSelector: {}
  persistence:
    enabled: false
  hidden:
    persistence:
      enabled: false
  arbiter:
    enabled: false
  podLabels: {}
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      namespace: monitoring
  service:
    ports:
      mongodb: 27017
  containerSecurityContext:
    enabled: true
    seLinuxOptions: null
    runAsUser: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
        - NET_RAW
    seccompProfile:
      type: "RuntimeDefault"
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    supplementalGroups: []
    fsGroup: 1001
  # Override default liveness/readiness probe for MongoDB(&reg;) containers
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  image:
    registry: docker.io
    repository: bitnami/mongodb
    tag: 7.0.15
  auth:
    rootUser: bigid
    rootPassword: password
  tls:
    enabled: false
    autoGenerated: false
    existingSecret: "bigid-mongodb-ca"
  replicaSetName: bigid-replica-set

# Bitnami Redis
redis:
  ## Enable Internal Bitnami Redis
  enabled: true
  fullnameOverride: bigid-cache
  serviceAccount:
    ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
    ##
    create: true
  commonLabels:
    app: bigid-cache
  ## For Redis Sentinal enabled, configure replication
  architecture: standalone # replication
  replica:
    replicaCount: 3
    persistence:
      enabled: false
    ## Configure Redis Pods Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Redis Container Security Context
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
          - NET_RAW
      seccompProfile:
        type: RuntimeDefault
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 4
  master:
    count: 1
    persistence:
      enabled: false
    podLabels: {}
    livenessProbe:
      initialDelaySeconds: 45
      timeoutSeconds: 20
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 4
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
          - NET_RAW
      seccompProfile:
        type: RuntimeDefault
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param master.podSecurityContext.enabled Enabled Redis&reg; master pods' Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
  image:
    repository: bitnami/redis
    tag: 7.4.1
  auth:
    enabled: true
    password: "password"
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      namespace: monitoring
  sentinel:
    enabled: false
    image:
      repository: bitnami/redis-sentinel
      tag: 7.4.1
    masterSet: bigid-master
    livenessProbe:
      initialDelaySeconds: 45
      timeoutSeconds: 60

  ## External Redis Connection string Details
  externalRedis:
    enabled: false
    hostname: ""
    port: ""
    password: ""

# Bitnami ES
elasticsearch:
  enabled: false
  ## When External Elasticsearch used, disable @param elasticsearch.enabled and set the fullUrl,user,elasticPassword.
  fullUrl: "https://bigid-elasticsearch:9200"
  tenantId: "mdsearch"
  port:
    transport: 9300
    http: 9200

  ## X-Pack security parameters
  ## Note: TLS configuration is required to configure password authentication
  security:
    enabled: true
    user: "elastic"
    elasticPassword: "password"
    ## @param elasticsearch.security.existingSecret Name of the existing secret containing the Elasticsearch password (expected key: `elasticsearch-password`)
    ##
    existingSecret: ""
    tls:
      ## @param security.tls.restEncryption Enable SSL/TLS encryption for Elasticsearch REST API.
      restEncryption: true
  image:
    repository: bitnami/elasticsearch
    #tag: 8.11.2-debian-11-r0
    tag: 8.17.4
  ## Kernel settings modifier image
  sysctlImage:
    ## @param sysctlImage.enabled Enable kernel settings modifier image
    enabled: true
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12
  data:
    ## @param data.replicaCount Number of data-only replicas to deploy
    replicaCount: 2
    fullnameOverride: "bigid-elasticsearch-data"
    ## @param data.servicenameOverride String to fully override elasticsearch.data.servicename
    servicenameOverride: "bigid-elasticsearch-data"
    ## @param data.nodeSelector Node labels for data pods assignment
    ## ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}
    resources:
      limits:
        cpu: 4
        memory: 24Gi
      requests:
        cpu: 1
        memory: 8Gi
    persistence:
      enabled: false
      storageClass: ""
      size: 50Gi
    ## Configure Pods Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Container Security Context
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
          - NET_RAW
      seccompProfile:
        type: RuntimeDefault
  master:
    ## @param master.masterOnly Deploy the Elasticsearch master-eligible nodes as master-only nodes. Recommended for high-demand deployments.
    ## If you are
    masterOnly: true
    ## @param master.replicaCount Number of master-eligible replicas to deploy
    replicaCount: 1
    ## @param master.nodeSelector Node labels for master-elegible pods assignment
    nodeSelector: {}
    resources:
      limits:
        cpu: 4
        memory: 16Gi
      requests:
        cpu: 1
        memory: 4Gi
    fullnameOverride: "bigid-elasticsearch"
    servicenameOverride: "bigid-elasticsearch"
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    ## Configure Container Security Context
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
          - NET_RAW
      seccompProfile:
        type: RuntimeDefault
    persistence:
      ## @param master.persistence.enabled Enable persistence using a `PersistentVolumeClaim`
      enabled: false
      storageClass: ""

## BigID External Apps.
external-apps:
  enabled: true
  global:
    ## Enable to inheirt MongoDB connection string secrets from BigID Core
    mongoSecrets:
      enabled: true
  ropa:
    enabled: false
  pia:
    enabled: false
  llm-suggestions:
    enabled: false
  risk-tagger:
    enabled: false
  classifier-helper:
    enabled: false
  discovery:
    gcp:
      enabled: false
    azure:
      enabled: false
    aws:
      enabled: false
    databricks:
      enabled: false
    ontap:
      enabled: false
  remediation:
    enabled: false
  retention:
    enabled: false
  actions:
    enabled: false
  actions-java:
    enabled: false
  alation:
    enabled: false
  collibra:
    enabled: false
  jira:
    enabled: false
  servicenow-irm:
    enabled: false
  xsoar-cortex:
    enabled: false
  hashicorp-vault:
    enabled: false
  wiz-data-exchange:
    enabled: false
  doc-classifiers-generator:
    enabled: false
  beyondtrust-secrets-safe:
    enabled: false
  azure-key-vault:
    enabled: false
  servicenow:
    enabled: false
  edc:
    enabled: false
